#+LaTex_HEADER: \usepackage{listings}

* Statistics, Probability and Noise
** Signals and Graph Terminology
*** Definitions
- \textbf{Signal} is how one parameter is related to another parameter
- \textbf{Continuous Signal} is if BOTH parameters can assume a continuous range
- \textbf{Discrete Signal} is if BOTH parameters are quantized in some manner
- \textbf{Time Domain} is if the X axis (the independent variable) is time
- \textbf{Frequency Domain} is if the X axis (the independent variable) is frequency
*** Concepts
- The two parameters of a signal are not interchangeable
- The parameter on the Y axis is a function of the one on the X axis
- Mathematicians tend to do 1-N, everyone else does 0-(N-1)
** Mean and Standard Deviation
*** Mean
- \textbf{Mean} \mu is the average of the signal.  Add all samples together and divide by N. In electronics this is the DC (direct current) value.
\begin{center} $$\mu = \frac{1}{N}\sum_{i=1}^{N-1}x_{i}$$ \end{center}

\begin{python}
   def Mean(self):
        """
        Calculate the mean of a list of values.
        The self.samples list should be set when instantiating
        this instance.
        """
        mean = 0
        for x in self.samples:
            mean = mean + x
        mean = mean/len(self.samples)
        return mean
\end{python}


*** Standard Deviation and Variance
- \textbf{Average Deviation} is not commonly used.  Sums up all the deviations, from the mean, for each sample and divided by the number of samples.  Use absolute values for deviation otherwise differences could cancel out.
- \textbf{Standard Deviation} averages the power.  This is the AC portion of the signal.  
\begin{center} $$\sigma = \sqrt{\frac{1}{N-1}\sum_{i=1}^{N-1} (x_{i} - \mu)^{2}}$$ \end{center}

\begin{python}
    def StandardDeviation(self):
        """
        Calculate the standard deviation of a list of values.
        The self.samples list should be set when instantiating
        this instance.
        """
        mean = self.Mean()
        std = 0.0
        for x in self.samples:
            std = std + math.pow((x - mean), 2)
        std = std / (len(self.samples) - 1)
        std = math.sqrt(std)
        return std
\end{python}

- \textbf{Variance}  is commonly used in statistics.  Notice variance and standard deviation both divide by N-1, not N!  
\begin{center} $$\sigma^{2} = \frac{1}{N-1}\sum_{i=1}^{N-1} (x_{i} - \mu)^{2}$$ \end{center}
\begin{python}
    def Variance(self):
        """
        Calculate the variance of a list of values.
        The self.samples list should be set when instantiating
        this instance.
        """
        return math.pow(self.StandardDeviation(), 2)
\end{python}

- \textbf{Root Mean Square (rms)} measures both the AC and DC components.
\begin{center} $$x_{rms} = \sqrt{\frac{1}{N}\sum_{i=0}^{N-1} (x_{i})^{2}}$$ \end{center}

*** Running Statistics
- \textbf{Running Statistics} is often needed.  In this situation we want to recompute mean and standard deviation of new signal added in without redoing all of the calculations

\begin{center}
$$
\sigma^{2} = \frac{1}{N-1} ( \sum_{i=0}^{N-1}(x_{i})^2 - \frac{1}{N}(\sum_{i=0}^{N-1} x_{i})^2)
$$
\end{center}

\begin{python}

    def RunningStatistics(self):
        """
        Calculate the mean, variance and std while running through a list of
        values. The self.samples list should be set when instantiating
        this instance.
        """
        mean = 0
        variance = 0
        std = 0
        temp_sum = 0
        sum_squares = 0
        N = len(self.samples)
        for x in self.samples:
            temp_sum = temp_sum + x
            sum_squares = sum_squares + math.pow(x, 2)
            mean = temp_sum/N
            variance = (sum_squares - (math.pow(temp_sum, 2)/N)) / (N - 1)
            std = math.sqrt(variance)
            print("RunningStatistics: Mean {} Variance {} STD {}".format(
                mean, variance, std))
        return mean, variance, std
\end{python}

- In some situations mean decribes what is being measured and standard deviation measures noise
- \textbf{Signal to Noise Ration (SNR)} is a comparison of mean to standard deviation
\begin{center}
$$
SNR = \frac{\mu}{\sigma}
$$
\end{center}

- \textbf{Coefficient of Variance (CV)} is the standard deviation divided by the mean and multiplied by 100%.
\begin{center}
$$
CV = \frac{\sigma}{\mu} * 100\%
$$
\end{center}

- High SNR and Low CV is a good signal!

** Signal vs. Underlying Process
- \textbf{Statistics} is the science of interpreting numerical data 
- \textbf{Probability} is used in DSP to understand the process that generated the signals
** The Histogram, PMF and PDF
** The Normal Distribution
** Digital Noise Generation
** Precision and Accuracy
