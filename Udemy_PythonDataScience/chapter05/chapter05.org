* Numpy
** Introduction
- Numpy is a Linear Algebra library for python
- Most other libraries are built on top of this
- Arrays come in 2 flavors, vectors or matrices
- Vectors are 1-D
- Matrices are 2-D
** Arrays
*** 1-D Array or Vector based off of a list in python
#+begin_src python :session
import numpy as np
my_list = [1,2,3]
print(my_list)
arr = np.array(my_list)
print(arr)
#+end_src

#+RESULTS:
: [1, 2, 3]
: [1 2 3]

*** 2-D array out of a list of lists
#+begin_src python :session
my_mat = [ [1,2,3], [4,5,6], [7,8,9]]
print(my_mat)
mat = np.array(my_mat)
print(mat)
#+end_src

#+RESULTS:
: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
: [[1 2 3]
:  [4 5 6]
:  [7 8 9]]

*** Built in array generation
**** np.arange is the simplest and most common
- has start, stop and step size parameters
#+begin_src python :session
np.arange(0,10)
np.arange(0,11)
np.arange(0,10,2)
#+end_src

#+RESULTS:
: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
: array([0, 2, 4, 6, 8])

*** zeros arrays
- it is done in ROWS by COLUMNS
#+begin_src python :session
np.zeros(5)
np.zeros((4,4))
np.zeros((3,4,5))
#+end_src

#+RESULTS:
#+begin_example
array([ 0.,  0.,  0.,  0.,  0.])
array([[ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.]])
array([[[ 0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.]],

       [[ 0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.]],

       [[ 0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.]]])
#+end_example

*** ones arrays
- it is done in ROWS by COLUMNS
#+begin_src python :session
np.ones(5)
np.ones((4,4))
np.ones((3,4,5))
#+end_src

#+RESULTS:
#+begin_example
array([ 1.,  1.,  1.,  1.,  1.])
array([[ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.]])
array([[[ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.]],

       [[ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.]],

       [[ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.]]])
#+end_example

*** linspace
- evenly spaced numbers over a specified interval
- needs to know number of points
- only 1 set of brackets, so it is 1-D despite way displayed
#+begin_src python :session
np.linspace(0,5,10)
np.linspace(0,5,20)
#+end_src

#+RESULTS:
: array([ 0.        ,  0.55555556,  1.11111111,  1.66666667,  2.22222222,
:         2.77777778,  3.33333333,  3.88888889,  4.44444444,  5.        ])
: array([ 0.        ,  0.26315789,  0.52631579,  0.78947368,  1.05263158,
:         1.31578947,  1.57894737,  1.84210526,  2.10526316,  2.36842105,
:         2.63157895,  2.89473684,  3.15789474,  3.42105263,  3.68421053,
:         3.94736842,  4.21052632,  4.47368421,  4.73684211,  5.        ])

*** Identity Matrix
- A 2-D square matrix with a diagnal value of 1 with all other locations being 0
- Takes a single input
#+begin_src python :session
np.eye(5)
#+end_src

#+RESULTS:
: array([[ 1.,  0.,  0.,  0.,  0.],
:        [ 0.,  1.,  0.,  0.,  0.],
:        [ 0.,  0.,  1.,  0.,  0.],
:        [ 0.,  0.,  0.,  1.,  0.],
:        [ 0.,  0.,  0.,  0.,  1.]])

*** Random Numbers
- Many different methods
**** *rand* will populate a uniform distribution from 0 to 1
- ROW by COLUMN seperate paramters, NOT a tuple
#+begin_src python :session
np.random.rand(5)
np.random.rand(3,4)
#+end_src

#+RESULTS:
: array([ 0.02864046,  0.88036378,  0.86265996,  0.75382794,  0.29591977])
: array([[ 0.09204731,  0.80176447,  0.70624197,  0.78862348],
:        [ 0.48883441,  0.97676213,  0.63746335,  0.44289179],
:        [ 0.71388266,  0.36116016,  0.17546822,  0.96161419]])

**** *randn* is normal or gaussian distribution centered around 0
- ROW by COLUMN seperate paramters, NOT a tuple
#+begin_src python :session
np.random.randn(5)
np.random.randn(3,4)
#+end_src

#+RESULTS:
: array([-0.18470759, -0.63267781, -0.98881348,  0.22180234,  0.44483078])
: array([[-1.77559152, -1.61820321,  0.13174758, -0.0748546 ],
:        [ 0.50107683, -0.15071797, -0.32667587, -0.17842948],
:        [-2.24841705, -0.7027937 , -0.29725896, -0.42314239]])

**** *randint* returns a random int from low to high
- low inclusive, high exclusive
#+begin_src python :session
np.random.randint(1,100, 10)
#+end_src

#+RESULTS:
: array([48, 90, 64, 74, 42, 27,  4, 22, 11, 53])

*** Reshape
- Will get an error if not enough elements for new shape
- Number of elements must be constant
#+begin_src python :session
arr = np.arange(25)
arr
ranarr = np.arange(0,50,10)
ranarr
arr.reshape(5,5)
#+end_src

#+RESULTS:
: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
:        17, 18, 19, 20, 21, 22, 23, 24])
: array([ 0, 10, 20, 30, 40])
: array([[ 0,  1,  2,  3,  4],
:        [ 5,  6,  7,  8,  9],
:        [10, 11, 12, 13, 14],
:        [15, 16, 17, 18, 19],
:        [20, 21, 22, 23, 24]])

*** Max Min Index Shape Datatype
- argmin and argmax give the index location of the minimum or maximum value
- shape is an /attribute/ not a function call
- dtype is an  /attribute/ not a function call
#+begin_src python :session
ranarr.max()
ranarr.min()
ranarr.argmax()
ranarr.argmin()
ranarr.shape
arr.shape
brr = arr.reshape(5,5)
brr.shape
arr.dtype
ranarr.dtype
#+end_src

#+RESULTS:
: 40
: 0
: 4
: 0
: (5,)
: (25,)
: (5, 5)
: dtype('int64')
: dtype('int64')

** Array Indexing and Selection
*** Indexing
- use brackets and slice notation just like a list
- differs from list due to ability to broadcast, like using pointers to data
- numpy does this to avoid issues with large arrays
- you can specify to copy specifically
#+begin_src python :session
arr = np.arange(0,11)
arr
arr[8]
arr[1:5]
arr[:6]
arr[5:]
arr[0:5]= 100
arr
arr = np.arange(0,11)
arr
slice_of_arr = arr[0:6]
slice_of_arr
slice_of_arr[:] = 99
slice_of_arr
arr
arr_copy = arr.copy()
arr_copy
arr_copy[:] = 100
arr_copy
arr
#+end_src

#+RESULTS:
#+begin_example

array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
8
array([1, 2, 3, 4])
array([0, 1, 2, 3, 4, 5])
array([ 5,  6,  7,  8,  9, 10])
array([100, 100, 100, 100, 100,   5,   6,   7,   8,   9,  10])
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
array([0, 1, 2, 3, 4, 5])
array([99, 99, 99, 99, 99, 99])
array([99, 99, 99, 99, 99, 99,  6,  7,  8,  9, 10])
array([99, 99, 99, 99, 99, 99,  6,  7,  8,  9, 10])
array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])
array([99, 99, 99, 99, 99, 99,  6,  7,  8,  9, 10])
#+end_example

**** 2D Arrays
- 2 ways to index, single or double bracket format
- single is recommended
- Can use slice notation to access elements
#+begin_src python :session 
arr_2d = np.array([[5,10,15], [20,25,30], [35,40,45]])
arr_2d
arr_2d[0][0]  # [ROW][COL]
arr_2d[0]
arr_2d[1][1]
arr_2d[1,1]  # [ROW,COL]
arr_2d[:2]
arr_2d[:2, 1:]
#+end_src

#+RESULTS:
#+begin_example

array([[ 5, 10, 15],
       [20, 25, 30],
       [35, 40, 45]])
5
array([ 5, 10, 15])
25
25
array([[ 5, 10, 15],
       [20, 25, 30]])
array([[10, 15],
       [25, 30]])
#+end_example

*** Conditional Selection
- Use comparison operators to obtain boolean values
#+begin_src python :session
arr = np.arange(1,11)
arr
bool_arr = arr > 5  # Returns an array of booleans
bool_arr
arr[bool_arr]  # returns where the boolean array is TRUE
arr[arr >5]    # COMMONLY USED!
arr[arr < 3]

arr_2d = np.arange(50).reshape(5,10)
arr_2d
arr_2d[2:4, 3:5]
#+end_src

#+RESULTS:
#+begin_example

array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
array([False, False, False, False, False,  True,  True,  True,  True,  True], dtype=bool)
array([ 6,  7,  8,  9, 10])
array([ 6,  7,  8,  9, 10])
array([1, 2])
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]])
array([[23, 24],
       [33, 34]])
#+end_example

** Operations
*** Array with Array
- simple arithmatic symbols
- *nan* is Not A Number, it is a NULL object
- *inf* is infinity
#+begin_src python :session
arr = np.arange(0,11)
arr
arr + arr
arr - arr
arr * arr 
arr / arr  # Warning when dividing by 0!
1/arr
#+end_src

#+RESULTS:
#+begin_example

array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20])
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
array([  0,   1,   4,   9,  16,  25,  36,  49,  64,  81, 100])
array([ nan,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.])
__main__:1: RuntimeWarning: divide by zero encountered in true_divide
array([        inf,  1.        ,  0.5       ,  0.33333333,  0.25      ,
        0.2       ,  0.16666667,  0.14285714,  0.125     ,  0.11111111,
        0.1       ])
#+end_example

*** Arrays with Scalar
#+begin_src python :session
arr + 100
arr * 5
arr / 10
arr ** 2
#+end_src

#+RESULTS:
: array([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110])
: array([ 0,  5, 10, 15, 20, 25, 30, 35, 40, 45, 50])
: array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])
: array([  0,   1,   4,   9,  16,  25,  36,  49,  64,  81, 100])

*** Universal Array Functions
#+begin_src python :session
np.sqrt(arr)
np.exp(arr)
np.max(arr)
np.sin(arr)
np.log(arr)
#+end_src

#+RESULTS:
#+begin_example
array([ 0.        ,  1.        ,  1.41421356,  1.73205081,  2.        ,
        2.23606798,  2.44948974,  2.64575131,  2.82842712,  3.        ,
        3.16227766])
array([  1.00000000e+00,   2.71828183e+00,   7.38905610e+00,
         2.00855369e+01,   5.45981500e+01,   1.48413159e+02,
         4.03428793e+02,   1.09663316e+03,   2.98095799e+03,
         8.10308393e+03,   2.20264658e+04])
10
array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ,
       -0.95892427, -0.2794155 ,  0.6569866 ,  0.98935825,  0.41211849,
       -0.54402111])
__main__:1: RuntimeWarning: divide by zero encountered in log
array([       -inf,  0.        ,  0.69314718,  1.09861229,  1.38629436,
        1.60943791,  1.79175947,  1.94591015,  2.07944154,  2.19722458,
        2.30258509])
#+end_example
** Exercises and Solutions

#+begin_src python :session
import numpy as np
zeros_array = np.zeros(10)
zeros_array
ones_array = np.ones(10)
ones_array
fives_array = ones_array * 5
fives_array
array_10_to_50 = np.arange(10,51)
array_10_to_50
array_evens_10_to_50 = np.arange(10,51,2)
array_evens_10_to_50

# Mine
mat = [[0,1,2],[3,4,5],[6,7,8]]
mat = np.array(mat)
mat

# Better from solutions video
np.arange(9).reshape(3,3)

np.eye(3)
np.random.rand(1)
np.random.randn(25)

# My solution
np.arange(0.01, 1.01, 0.01).reshape(10,10)

# Teacher Solution 1
np.arange(1,101).reshape(10,10)/100

# Teacher Solution 1
np.linspace(0.01, 1,100).reshape(10,10)

np.linspace(0,1,20)

mat = np.arange(1,26).reshape(5,5)
mat
mat[2:, 1:]
mat[3,4]
mat[:3, 1:2]
mat[4, :]
mat[3:5, :]
np.sum(mat)
np.std(mat)
np.sum(mat, axis=0)
#+end_src

#+RESULTS:
#+begin_example

array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])
array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])
array([ 5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.])
array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
       44, 45, 46, 47, 48, 49, 50])
array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
       44, 46, 48, 50])
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.]])
array([ 0.7390121])
array([-1.0400099 , -0.89754208,  0.81658314,  0.13229122, -0.19283587,
        1.37262841,  0.00542074,  0.35358323,  0.81751654, -0.67885289,
        1.59296825, -0.16555542, -1.04410731,  0.61100858, -2.04456512,
       -1.55224485,  0.50763545,  0.1226728 ,  1.13722892, -1.43289586,
        0.48325658,  0.06511005,  0.95509684, -0.56246034,  1.34662452])
array([[ 0.01,  0.02,  0.03,  0.04,  0.05,  0.06,  0.07,  0.08,  0.09,  0.1 ],
       [ 0.11,  0.12,  0.13,  0.14,  0.15,  0.16,  0.17,  0.18,  0.19,  0.2 ],
       [ 0.21,  0.22,  0.23,  0.24,  0.25,  0.26,  0.27,  0.28,  0.29,  0.3 ],
       [ 0.31,  0.32,  0.33,  0.34,  0.35,  0.36,  0.37,  0.38,  0.39,  0.4 ],
       [ 0.41,  0.42,  0.43,  0.44,  0.45,  0.46,  0.47,  0.48,  0.49,  0.5 ],
       [ 0.51,  0.52,  0.53,  0.54,  0.55,  0.56,  0.57,  0.58,  0.59,  0.6 ],
       [ 0.61,  0.62,  0.63,  0.64,  0.65,  0.66,  0.67,  0.68,  0.69,  0.7 ],
       [ 0.71,  0.72,  0.73,  0.74,  0.75,  0.76,  0.77,  0.78,  0.79,  0.8 ],
       [ 0.81,  0.82,  0.83,  0.84,  0.85,  0.86,  0.87,  0.88,  0.89,  0.9 ],
       [ 0.91,  0.92,  0.93,  0.94,  0.95,  0.96,  0.97,  0.98,  0.99,  1.  ]])
array([[ 0.01,  0.02,  0.03,  0.04,  0.05,  0.06,  0.07,  0.08,  0.09,  0.1 ],
       [ 0.11,  0.12,  0.13,  0.14,  0.15,  0.16,  0.17,  0.18,  0.19,  0.2 ],
       [ 0.21,  0.22,  0.23,  0.24,  0.25,  0.26,  0.27,  0.28,  0.29,  0.3 ],
       [ 0.31,  0.32,  0.33,  0.34,  0.35,  0.36,  0.37,  0.38,  0.39,  0.4 ],
       [ 0.41,  0.42,  0.43,  0.44,  0.45,  0.46,  0.47,  0.48,  0.49,  0.5 ],
       [ 0.51,  0.52,  0.53,  0.54,  0.55,  0.56,  0.57,  0.58,  0.59,  0.6 ],
       [ 0.61,  0.62,  0.63,  0.64,  0.65,  0.66,  0.67,  0.68,  0.69,  0.7 ],
       [ 0.71,  0.72,  0.73,  0.74,  0.75,  0.76,  0.77,  0.78,  0.79,  0.8 ],
       [ 0.81,  0.82,  0.83,  0.84,  0.85,  0.86,  0.87,  0.88,  0.89,  0.9 ],
       [ 0.91,  0.92,  0.93,  0.94,  0.95,  0.96,  0.97,  0.98,  0.99,  1.  ]])
array([[ 0.01,  0.02,  0.03,  0.04,  0.05,  0.06,  0.07,  0.08,  0.09,  0.1 ],
       [ 0.11,  0.12,  0.13,  0.14,  0.15,  0.16,  0.17,  0.18,  0.19,  0.2 ],
       [ 0.21,  0.22,  0.23,  0.24,  0.25,  0.26,  0.27,  0.28,  0.29,  0.3 ],
       [ 0.31,  0.32,  0.33,  0.34,  0.35,  0.36,  0.37,  0.38,  0.39,  0.4 ],
       [ 0.41,  0.42,  0.43,  0.44,  0.45,  0.46,  0.47,  0.48,  0.49,  0.5 ],
       [ 0.51,  0.52,  0.53,  0.54,  0.55,  0.56,  0.57,  0.58,  0.59,  0.6 ],
       [ 0.61,  0.62,  0.63,  0.64,  0.65,  0.66,  0.67,  0.68,  0.69,  0.7 ],
       [ 0.71,  0.72,  0.73,  0.74,  0.75,  0.76,  0.77,  0.78,  0.79,  0.8 ],
       [ 0.81,  0.82,  0.83,  0.84,  0.85,  0.86,  0.87,  0.88,  0.89,  0.9 ],
       [ 0.91,  0.92,  0.93,  0.94,  0.95,  0.96,  0.97,  0.98,  0.99,  1.  ]])
array([ 0.        ,  0.05263158,  0.10526316,  0.15789474,  0.21052632,
        0.26315789,  0.31578947,  0.36842105,  0.42105263,  0.47368421,
        0.52631579,  0.57894737,  0.63157895,  0.68421053,  0.73684211,
        0.78947368,  0.84210526,  0.89473684,  0.94736842,  1.        ])
array([[ 1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15],
       [16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25]])
array([[12, 13, 14, 15],
       [17, 18, 19, 20],
       [22, 23, 24, 25]])
20
array([[ 2],
       [ 7],
       [12]])
array([21, 22, 23, 24, 25])
array([[16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25]])
325
7.2111025509279782
array([55, 60, 65, 70, 75])
#+end_example
